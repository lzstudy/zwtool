############################################################################### {yocto}
# {base}
PV                                        # 软件包版本号
config/bitbake.conf  		              # yocto底层配置文件, 配置主要变量(公共变量)
class/base.bbclass   		              # 通用任务配置文件
meta-xxx-layer       		              # 元数据的集合
conf/bblayers.conf   		              # 定位工程所用到的层
bblayer.conf/local.conf                   # 用户配置文件
recipe                                    # 元数据的最常见形式, bb  .bbappend  inc   .bbclass

############################################################################### {openeuler} {oe}
#====================================== {file}
# {base} {基础文件}
${oe}/src/yocto-meta-openeuler/.oebuild/manifest.yaml                                            # 所有的软件源
${oe}/src/yocto-meta-openeuler/meta-openeuler/recipes-core/packagegroups/packagegroup-base.bb    # 所有的基础软件
# {config} {配置文件}
${oe}/src/yocto-poky/meta/recipes-core/base-files                                                # 换标文件
${oe}/src/yocto-meta-openeuler/meta-openeuler/conf/distro/openeuler.conf                         # openeuler配置文件
${oe}src/yocto-meta-openeuler/meta-openeuler/recipes-core/packagegroups/base.bb                  # 所有要编译下载的包在这里

#====================================== {flow}
oebuild init <work_dir>                   # 初始化工作环境
oebuild update                            # 设置容器，拉取基础层
oebuild generate -p ok3588 -d ok3588      # 生成比那一配置文件
oebuild bitbake openeuler-image           # 编译镜像

#====================================== {dbg}
bitbake <target> -c cleansstate           # 重新构建target之前
bitbake <target> -e > env.log             # 所有的bb文件
bitbake <target> -g

#====================================== {cmd}
# {oebuild}
oebuild update yocto                      # 更新系统仓库(openeuler、poky、openembeded三个目录)
oebulid init -b openEuler-23.09           # 选择q初始化分支
oebuild generate -l                       # 列出支持的单板
oebuild generate -p <platform> -d <dir>   # 设置要构建的单板

# {bitbake} {bb}
bitbake -s                                # 查看所有的配方(target/recipe)
bitbake <recipe>                          # 构建配方(所有的任务)
bitbake <recipe> -c listtask              # 查看某个配方所有的任务
bitbake -f <recipe>                       # 强制编译某个配方(会走全部任务)
bitbake <recipe> -C do_compile            # 强制编译某个配方(只编译), -C 会让时间戳失效, -v会打印详细信息
bitbake <recipe> -C do_compile -v -DDD    # -v会打印详细信息, -DDD 打印log.do_compile
bitbake -e zlib > mybb.log     	          # 查看执行环境中使用的配置文件和类文件

